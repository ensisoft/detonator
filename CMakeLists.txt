cmake_minimum_required(VERSION 3.0)

project(Gamestudio)

message(STATUS "
          ~~ Ensisoft GameStudio ~~

    \\\\o Brought to you by Ensisoft o//
        http://www.ensisoft.com
    Copyright (c) 2019 Sami Väisänen
                Ensisoft

https://github.com/ensisoft/gamestudio

")


include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()

# wdk
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/wdk)

# Unfortunately we need boost...
set(Boost_USE_STATIC_LIBS ON)
if(WIN32)
    set(BOOST_ROOT $ENV{BOOST_ROOT})
    if (NOT BOOST_ROOT)
        set(BOOST_ROOT "c:/local/boost_1_72_0")
        message("
Bollocks. BOOST_ROOT was not set. Defaulting to ${BOOST_ROOT}
TL;DR BOOST_ROOT is a variable that points to your Boost installation
root. So for example if your Boost is installed in C:/boost_1_55_0
your BOOST_ROOT should be c:/boost_1_55_0.
You can set the variable in M$ command prompt with

        $ set BOOST_ROOT=c:/boost_1_55_0

and in Linux in your terminal (in bash)

        $ export BOOST_ROOT=/usr/local/boost_1_55_0

")
    endif()
endif()

# for some reason the find_package fails on windows when we say which
# libs we'd like to use. Anyway the linking is automatic so we'll just
# add the libs manually to linking options for Linux.
#find_package(Boost REQUIRED COMPONENTS system filesystem)
find_package(Boost REQUIRED COMPONENTS)
if(NOT Boost_FOUND)
    if (UNIX)
        message(FATAL_ERROR "
Boost (http://www.boost.org) development libraries were not found.
You should be able to use the boost dev packages available in your distro's repos.
On Ubuntu you might want to try 'sudo apt-get install libboost-all-dev'
On other distros please consult your distro's docs on how to install Boost.
I'm going to crap out now. >.<
")
    elseif(WIN32)
        message(FATAL_ERROR "
Boost (http://www.boost.org) development libraries were not found.
You can download a prebuilt binary package from http://www.boost.org.
Or if you're using Visual Studio 2015 you can follow this direct link:
https://sourceforge.net/projects/boost/files/boost-binaries/1.61.0/boost_1_61_0-msvc-14.0-64.exe/download
If you have boost but not in a default location or another version of boost
you can try to specify BOOST_ROOT environment variable.
I'm going to crap out now. >.<
")
    endif()
endif()

# why is this not set!?
# should come from cmake through find_package(Boost, ...)
if (MSVC)
    if(NOT Boost_LIBRARY_DIRS)
        message(WARNING "
Boost_LIBRARY_DIRS is not set.
I'm going to use a default for MSVS 14 2015 Win64.
If that doesn't match your build environment/compiler/arch you will need
to edit the line below this message manually.
Sorry about that :-(
")
        set(Boost_LIBRARY_DIRS "${BOOST_ROOT}/lib64-msvc-14.0")
    endif()
endif()

message(STATUS "${Boost_INCLUDE_DIRS}")
message(STATUS "${Boost_LIBRARY_DIRS}")

include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/wdk")
include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party")
include_directories(BEFORE "${CMAKE_CURRENT_LIST_DIR}/third_party/Khronos")
include_directories(BEFORE "${Boost_INCLUDE_DIRS}")
link_directories("${Boost_LIBRARY_DIRS}")

# see this bug report about C++14 and Qt
# https://bugreports.qt.io/browse/QTBUG-53002
set(CMAKE_CXX_STANDARD 17)

if (MSVC)
    # /wd4251 Qt dll interface crap
    # /wd4275 Qt dll interface crap again
    # /wd4018 signed/unsigned mismatch
    # /wd4244 conversion from double to float
    # /wd4305 truncation from double to float
    # /wd4267 conversion from size_t to int (Qt uses ints extensively)
    add_definitions("/wd4251 /wd4275 /wd4018 /wd4244 /wd4305 /wd4267")
endif()

# we also need Qt for the time being
if (WIN32)
    set(CMAKE_PREFIX_PATH "C:/Qt/5.15.2/msvc2019_64")
endif()

find_package(Qt5Widgets)
find_package(Qt5OpenGL)
find_package(Qt5Network)
if (NOT Qt5Widgets_FOUND)
    message("
Qt5 was not found. I will not be able to build the game.
")
else()
    message(STATUS "Qt5 version: ${Qt5Widgets_VERSION}")
    message(STATUS "${Qt5Widgets_INCLUDE_DIRS}")
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
# this tells cmake to include our *current* directory which is our build directory
# in which the Qt tools (moc and uic) will spit out their generated files.
# so for example when you have "include ui_foobar.h" in your code the
# ui_foobar.h is generated by UIC and will be placed in the current dir.
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# combine as many translation units as possible into static libraries
# in order to reduce the build times by not repeatedly building a translation
# unit when it's possible to use a library
#add_library(AudioLib
#    audio/sndfile.cpp
#    audio/pulseaudio.cpp
#    audio/waveout.cpp
#    audio/source.cpp
#    audio/player.cpp
#    audio/element.cpp
#    audio/graph.cpp)
add_library(BaseLib
    base/assert.cpp
    base/format.cpp
    base/logging.cpp
    base/json.cpp
    base/utility.cpp)
add_library(DataLib
    data/json.cpp)
add_library(GfxLib
    graphics/bitmap.cpp
    graphics/drawing.cpp
    graphics/drawable.cpp
    graphics/material.cpp
    graphics/image.cpp
    graphics/opengl_es2_device.cpp
    graphics/painter.cpp
    graphics/text.cpp
    graphics/resource.cpp
    third_party/stb/stb_image.c
    third_party/stb/stb_image_write.c
    third_party/base64/base64.cpp)
add_library(EngineLib
    engine/animation.cpp
    engine/renderer.cpp
    engine/entity.cpp
    engine/scene.cpp
    engine/types.cpp
    engine/physics.cpp
    engine/ui.cpp)
add_library(UiLib
    uikit/layout.cpp
    uikit/widget.cpp
    uikit/window.cpp)

#target_include_directories(AudioLib  PRIVATE "${CMAKE_CURRENT_LIST_DIR}/config")
target_include_directories(BaseLib   PRIVATE "${CMAKE_CURRENT_LIST_DIR}/config")
target_include_directories(DataLib   PRIVATE "${CMAKE_CURRENT_LIST_DIR}/config")
target_include_directories(GfxLib    PRIVATE "${CMAKE_CURRENT_LIST_DIR}/config")
target_include_directories(EngineLib PRIVATE "${CMAKE_CURRENT_LIST_DIR}/config")
target_include_directories(UiLib     PRIVATE "${CMAKE_CURRENT_LIST_DIR}/config")
if (UNIX)
#    target_compile_options(AudioLib  PRIVATE -fPIC)
    target_compile_options(DataLib   PRIVATE -fPIC)
    target_compile_options(BaseLib   PRIVATE -fPIC)
    target_compile_options(GfxLib    PRIVATE -fPIC)
    target_compile_options(EngineLib PRIVATE -fPIC)
    target_compile_options(UiLib     PRIVATE -fPIC)
endif()
if (MSVC)
   target_compile_options(EngineLib  INTERFACE /bigobj)
endif()

# Editor application.
add_executable(GSEditor
    editor/app/event.h
    editor/app/eventlog.h
    editor/app/eventlog.cpp
    editor/app/format.h
    editor/app/format.cpp
    editor/app/packing.h
    editor/app/packing.cpp
    editor/app/utility.h
    editor/app/utility.cpp
    editor/app/workspace.h
    editor/app/workspace.cpp
    editor/app/buffer.h
    editor/app/buffer.cpp
    editor/app/packing.cpp
    editor/app/process.h
    editor/app/process.cpp
    editor/app/ipc.cpp
    editor/gui/animationtrackwidget.h
    editor/gui/animationtrackwidget.ui
    editor/gui/animationtrackwidget.cpp
    editor/gui/childwindow.h
    editor/gui/childwindow.cpp
    editor/gui/childwindow.ui
    editor/gui/codewidget.h
    editor/gui/codewidget.cpp
    editor/gui/drawing.cpp
    editor/gui/playwindow.h
    editor/gui/playwindow.cpp
    editor/gui/playwindow.ui
    editor/gui/dlgabout.h
    editor/gui/dlgabout.ui
    editor/gui/dlgabout.cpp
    editor/gui/dlgsettings.h
    editor/gui/dlgsettings.ui
    editor/gui/dlgsettings.cpp
    editor/gui/dlgentity.h
    editor/gui/dlgentity.ui
    editor/gui/dlgentity.cpp
    editor/gui/dlgbitmap.h
    editor/gui/dlgbitmap.cpp
    editor/gui/dlgtext.h
    editor/gui/dlgtext.cpp
    editor/gui/dlgtext.ui
    editor/gui/dlgtexturerect.h
    editor/gui/dlgtexturerect.ui
    editor/gui/dlgtexturerect.cpp
    editor/gui/dlgimgpack.ui
    editor/gui/dlgimgpack.h
    editor/gui/dlgimgpack.cpp
    editor/gui/dlgmaterial.h
    editor/gui/dlgmaterial.ui
    editor/gui/dlgmaterial.cpp
    editor/gui/dlgmaterialparams.h
    editor/gui/dlgmaterialparams.ui
    editor/gui/dlgmaterialparams.cpp
    editor/gui/dlgpackage.h
    editor/gui/dlgpackage.ui
    editor/gui/dlgpackage.cpp
    editor/gui/dlgproject.h
    editor/gui/dlgproject.ui
    editor/gui/dlgproject.cpp
    editor/gui/dlgsave.h
    editor/gui/dlgsave.ui
    editor/gui/dlgsave.cpp
    editor/gui/dlgopen.h
    editor/gui/dlgopen.ui
    editor/gui/dlgopen.cpp
    editor/gui/dlgscriptvar.h
    editor/gui/dlgscriptvar.ui
    editor/gui/dlgscriptvar.cpp
    editor/gui/dlgnew.h
    editor/gui/dlgnew.ui
    editor/gui/gfxwidget.h
    editor/gui/gfxwidget.cpp
    editor/gui/mainwidget.h
    editor/gui/mainwindow.h
    editor/gui/mainwindow.cpp
    editor/gui/mainwindow.ui
    editor/gui/main.cpp
    editor/gui/particlewidget.h
    editor/gui/particlewidget.cpp
    editor/gui/particlewidget.ui
    editor/gui/polygonwidget.ui
    editor/gui/polygonwidget.h
    editor/gui/polygonwidget.cpp
    editor/gui/materialwidget.h
    editor/gui/materialwidget.cpp
    editor/gui/materialwidget.ui
    editor/gui/entitywidget.h
    editor/gui/entitywidget.ui
    editor/gui/entitywidget.cpp
    editor/gui/scenewidget.h
    editor/gui/scenewidget.ui
    editor/gui/scenewidget.cpp
    editor/gui/scriptwidget.h
    editor/gui/scriptwidget.ui
    editor/gui/scriptwidget.cpp
    editor/gui/settings.h
    editor/gui/settings.cpp
    editor/gui/treewidget.h
    editor/gui/treewidget.cpp
    editor/gui/timelinewidget.h
    editor/gui/timelinewidget.cpp
    editor/gui/uiwidget.h
    editor/gui/uiwidget.ui
    editor/gui/uiwidget.cpp
    editor/gui/uniform.h
    editor/gui/uniform.ui
    editor/gui/sampler.h
    editor/gui/sampler.ui
    editor/gui/widgetstylewidget.h
    editor/gui/widgetstylewidget.ui
    editor/gui/widgetstylewidget.cpp
    editor/gui/utility.cpp
    editor/resource/resource.qrc
    editor/welcome.qrc
    third_party/QSourceHighlight/languagedata.cpp
    third_party/QSourceHighlight/qsourcehighliter.cpp
    third_party/QSourceHighlight/qsourcehighliterthemes.cpp
    third_party/Qt-Color-Widgets/src/abstract_widget_list.cpp
    third_party/Qt-Color-Widgets/src/bound_color_selector.cpp
    third_party/Qt-Color-Widgets/src/color_2d_slider.cpp
    third_party/Qt-Color-Widgets/src/color_delegate.cpp
    third_party/Qt-Color-Widgets/src/color_dialog.cpp
    third_party/Qt-Color-Widgets/src/color_dialog.ui
    third_party/Qt-Color-Widgets/src/color_line_edit.cpp
    third_party/Qt-Color-Widgets/src/color_list_widget.cpp
    third_party/Qt-Color-Widgets/src/color_names.cpp
    third_party/Qt-Color-Widgets/src/color_palette.cpp
    third_party/Qt-Color-Widgets/src/color_palette_model.cpp
    third_party/Qt-Color-Widgets/src/color_palette_widget.cpp
    third_party/Qt-Color-Widgets/src/color_palette_widget.ui
    third_party/Qt-Color-Widgets/src/color_preview.cpp
    third_party/Qt-Color-Widgets/src/color_selector.cpp
    third_party/Qt-Color-Widgets/src/color_utils.cpp
    third_party/Qt-Color-Widgets/src/color_wheel.cpp
    third_party/Qt-Color-Widgets/src/color_widgets.qrc
    third_party/Qt-Color-Widgets/src/gradient_slider.cpp
    third_party/Qt-Color-Widgets/src/hue_slider.cpp
    third_party/Qt-Color-Widgets/src/swatch.cpp
    third_party/Qt-Color-Widgets/include/abstract_widget_list.hpp
    third_party/Qt-Color-Widgets/include/bound_color_selector.hpp
    third_party/Qt-Color-Widgets/include/color_2d_slider.hpp
    third_party/Qt-Color-Widgets/include/color_delegate.hpp
    third_party/Qt-Color-Widgets/include/color_dialog.hpp
    third_party/Qt-Color-Widgets/include/color_line_edit.hpp
    third_party/Qt-Color-Widgets/include/color_list_widget.hpp
    third_party/Qt-Color-Widgets/include/color_names.hpp
    third_party/Qt-Color-Widgets/include/color_palette.hpp
    third_party/Qt-Color-Widgets/include/color_palette_model.hpp
    third_party/Qt-Color-Widgets/include/color_palette_widget.hpp
    third_party/Qt-Color-Widgets/include/color_preview.hpp
    third_party/Qt-Color-Widgets/include/color_selector.hpp
    third_party/Qt-Color-Widgets/include/color_wheel.hpp
    third_party/Qt-Color-Widgets/include/colorwidgets_global.hpp
    third_party/Qt-Color-Widgets/include/gradient_slider.hpp
    third_party/Qt-Color-Widgets/include/hue_slider.hpp
    third_party/Qt-Color-Widgets/include/swatch.hpp
)
target_compile_definitions(GSEditor PRIVATE "QTCOLORWIDGETS_LIBRARY")
target_include_directories(GSEditor PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor")
# add this include for the promoted widgets
target_include_directories(GSEditor PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor/gui")
target_include_directories(GSEditor PRIVATE "${CMAKE_CURRENT_LIST_DIR}/third_party/Qt-Color-Widgets/include")
# support Clion finding the generated headers (see AUTOGEN_BUILD_DIR)
target_include_directories(GSEditor PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/Editor_autogen/include")
target_link_libraries(GSEditor Qt5::Widgets Qt5::OpenGL Qt5::Core Qt5::CorePrivate Qt5::Network)
target_link_libraries(GSEditor EngineLib UiLib GfxLib DataLib BaseLib)
target_link_libraries(GSEditor ${CONAN_LIBS})
install(TARGETS GSEditor DESTINATION  "${CMAKE_CURRENT_LIST_DIR}/editor/dist")

# game host application which provides a host process to load the game
# libraries for playback.
add_executable(EditorGameHost
    editor/app/format.cpp
    editor/app/utility.cpp
    editor/app/eventlog.h
    editor/app/eventlog.cpp
    editor/app/packing.cpp
    editor/app/workspace.h
    editor/app/workspace.cpp
    editor/app/buffer.cpp
    editor/app/ipc.h
    editor/app/ipc.cpp
    editor/gui/host.cpp
    editor/gui/utility.h
    editor/gui/playwindow.h
    editor/gui/playwindow.ui
    editor/gui/playwindow.cpp
    editor/resource/resource.qrc
)
target_include_directories(EditorGameHost PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor")
target_include_directories(EditorGameHost PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor/gui")
target_include_directories(EditorGameHost PRIVATE "${CMAKE_CURRENT_LIST_DIR}/third_party/Qt-Color-Widgets/include")
# support Clion finding the generated headers (see AUTOGEN_BUILD_DIR)
target_include_directories(EditorGameHost PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/EditorGameHost_autogen/include")
target_link_libraries(EditorGameHost Qt5::Widgets Qt5::OpenGL Qt5::Core Qt5::CorePrivate Qt5::Network)
target_link_libraries(EditorGameHost EngineLib UiLib GfxLib DataLib BaseLib)
target_link_libraries(EditorGameHost ${CONAN_LIBS})
install(TARGETS EditorGameHost DESTINATION  "${CMAKE_CURRENT_LIST_DIR}/editor/dist")

# audio test application. Simple console application that plays
# OGG and WAV files in several different formats.
add_executable(audio_test
    audio/sndfile.cpp
    audio/pulseaudio.cpp
    audio/waveout.cpp
    audio/source.cpp
    audio/player.cpp
    audio/element.cpp
    audio/graph.cpp
    audio/test/main.cpp
)
target_include_directories(audio_test PRIVATE "${CMAKE_CURRENT_LIST_DIR}/audio/test")
target_link_libraries(audio_test BaseLib)
target_link_libraries(audio_test Qt5::Widgets)
target_link_libraries(audio_test ${CONAN_LIBS})
if (UNIX)
    target_link_libraries(audio_test pulse)
    target_link_libraries(audio_test pthread)
endif()
install(TARGETS audio_test DESTINATION "${CMAKE_CURRENT_LIST_DIR}/audio/test/")

# graphics test application. Uses the graphics APIs to draw stuff.
# needs DETERMINISTIC_RANDOM flag
add_executable(graphics_test
    graphics/bitmap.cpp
    graphics/material.cpp
    graphics/drawable.cpp
    graphics/drawing.cpp
    graphics/opengl_es2_device.cpp
    graphics/painter.cpp
    graphics/text.cpp
    graphics/resource.cpp
    graphics/image.cpp
    graphics/test/main.cpp
    third_party/stb/stb_image.c
    third_party/stb/stb_image_write.c
    third_party/base64/base64.cpp
)
target_include_directories(graphics_test PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/test")
target_link_libraries(graphics_test BaseLib)
target_link_libraries(graphics_test ${CONAN_LIBS})
target_link_libraries(graphics_test wdk_system wdk_desktop_gl)
install(TARGETS graphics_test DESTINATION "${CMAKE_CURRENT_LIST_DIR}/graphics/test/dist")

# main game runner application. The executable will read a
# config.json and create the window/context for the application as
# per the configuration. The game logic will be loaded from a .so or .dll
add_executable(GameMain engine/main/main.cpp)
target_include_directories(GameMain PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/main")
target_link_libraries(GameMain DataLib BaseLib wdk_system wdk_desktop_gl)
if (UNIX)
    target_link_libraries(GameMain dl pthread)
endif()
install(TARGETS GameMain DESTINATION "${CMAKE_CURRENT_LIST_DIR}/editor/dist")

# generic game engine library.
add_library(GameEngine SHARED
    engine/loader.cpp
    engine/engine.cpp
    engine/lua.cpp
    engine/main/gamelib.cpp
)
target_include_directories(GameEngine PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/main")
target_link_libraries(GameEngine PRIVATE GfxLib EngineLib UiLib DataLib BaseLib)
target_link_libraries(GameEngine PRIVATE ${CONAN_LIBS})
target_link_libraries(GameEngine PRIVATE wdk_system)
install(TARGETS GameEngine DESTINATION "${CMAKE_CURRENT_LIST_DIR}/editor/dist")
# hide symbols on linux
if (CMAKE_COMPILER_IS_GNUCC)
    target_link_options(GameEngine PRIVATE "-Wl,--version-script=${CMAKE_CURRENT_LIST_DIR}/linux_linker_gamelib.txt")
endif()

# test engine
add_library(TestEngine SHARED
    engine/loader.cpp
    engine/test/main.cpp
    engine/main/gamelib.cpp
)
target_include_directories(TestEngine PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/test")
target_link_libraries(TestEngine PRIVATE GfxLib EngineLib UiLib DataLib BaseLib)
target_link_libraries(TestEngine PRIVATE ${CONAN_LIBS})
install(TARGETS TestEngine GameMain DESTINATION "${CMAKE_CURRENT_LIST_DIR}/engine/test/dist")

# hide symbols on linux
if (CMAKE_COMPILER_IS_GNUCC)
    target_link_options(TestEngine PRIVATE "-Wl,--version-script=${CMAKE_CURRENT_LIST_DIR}/linux_linker_gamelib.txt")
endif()

# simple standalone executable to play with lua and sol
# for testing c++/lua integration strategies.
add_executable(lua-test engine/test/luatest.cpp)
target_include_directories(lua-test PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/test")
target_link_libraries(lua-test PRIVATE ${CONAN_LIBS})

# unit tests
enable_testing()

#editor unit tests
add_executable(unit_test_imgpack
        editor/app/unit_test/unit_test_image_packing.cpp
        editor/app/packing.cpp
        base/assert.cpp
        third_party/stb/stb_image.c
        third_party/stb/stb_image_write.c)
add_executable(unit_test_ipc
        editor/app/unit_test/unit_test_ipc.cpp
        editor/app/eventlog.cpp
        editor/app/format.cpp
        editor/app/utility.cpp
        editor/app/workspace.cpp
        editor/app/buffer.cpp
        editor/app/ipc.cpp
        editor/app/packing.cpp)
add_executable(unit_test_resource
        editor/app/unit_test/unit_test_resource.cpp
        editor/app/utility.cpp
        base/assert.cpp)
add_executable(unit_test_workspace
        editor/app/unit_test/unit_test_workspace.cpp
        engine/loader.cpp
        editor/app/utility.cpp
        editor/app/format.cpp
        editor/app/eventlog.cpp
        editor/app/workspace.cpp
        editor/app/buffer.cpp
        editor/app/packing.cpp)
add_test(NAME unit_test_imgpack   COMMAND unit_test_imgpack)
add_test(NAME unit_test_ipc       COMMAND unit_test_ipc)
add_test(NAME unit_test_resource  COMMAND unit_test_resource)
add_test(NAME unit_test_workspace COMMAND unit_test_workspace)
target_include_directories(unit_test_imgpack   PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor/app/unit_test")
target_include_directories(unit_test_ipc       PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor/app/unit_test")
target_include_directories(unit_test_resource  PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor/app/unit_test")
target_include_directories(unit_test_workspace PRIVATE "${CMAKE_CURRENT_LIST_DIR}/editor/app/unit_test")
target_link_libraries(unit_test_ipc Qt5::Widgets Qt5::OpenGL Qt5::Core Qt5::CorePrivate Qt5::Network)
target_link_libraries(unit_test_ipc EngineLib UiLib GfxLib DataLib BaseLib ${CONAN_LIBS})
target_link_libraries(unit_test_resource Qt5::Core Qt5::Widgets DataLib BaseLib)
target_link_libraries(unit_test_workspace EngineLib UiLib GfxLib DataLib BaseLib)
target_link_libraries(unit_test_workspace Qt5::Core Qt5::Widgets Qt5::CorePrivate Qt5::Network ${CONAN_LIBS})

# engine tests
add_executable(unit_test_settings engine/unit_test/unit_test_settings.cpp)
add_executable(unit_test_tree engine/unit_test/unit_test_tree.cpp base/assert.cpp)
add_executable(unit_test_anim engine/unit_test/unit_test_animation.cpp
        base/assert.cpp
        engine/entity.cpp
        engine/types.cpp
        engine/animation.cpp)
add_executable(unit_test_entity engine/unit_test/unit_test_entity.cpp
        base/assert.cpp
        engine/animation.cpp
        engine/types.cpp
        engine/entity.cpp)
add_executable(unit_test_scene engine/unit_test/unit_test_scene.cpp
        base/assert.cpp
        engine/scene.cpp
        engine/animation.cpp
        engine/types.cpp
        engine/entity.cpp)
add_executable(unit_test_lua engine/unit_test/unit_test_lua.cpp
        base/assert.cpp
        engine/lua.cpp
        engine/animation.cpp
        engine/scene.cpp
        engine/entity.cpp
        engine/types.cpp
        engine/physics.cpp)
if (MSVC)
    target_compile_options(unit_test_lua PRIVATE /bigobj)
endif()
target_link_libraries(unit_test_entity   DataLib BaseLib)
target_link_libraries(unit_test_scene    DataLib BaseLib)
target_link_libraries(unit_test_lua      UiLib   DataLib BaseLib wdk_system ${CONAN_LIBS})
target_link_libraries(unit_test_settings DataLib BaseLib)
target_link_libraries(unit_test_anim     DataLib BaseLib ${CONAN_LIBS})
target_link_libraries(unit_test_tree     DataLib BaseLib)

target_include_directories(unit_test_tree     PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/unit_test")
target_include_directories(unit_test_anim     PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/unit_test")
target_include_directories(unit_test_settings PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/unit_test")
target_include_directories(unit_test_entity   PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/unit_test")
target_include_directories(unit_test_scene    PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/unit_test")
target_include_directories(unit_test_lua      PRIVATE "${CMAKE_CURRENT_LIST_DIR}/engine/unit_test")
add_test(NAME unit_test_tree     COMMAND unit_test_tree)
add_test(NAME unit_test_anim     COMMAND unit_test_anim)
add_test(NAME unit_test_settings COMMAND unit_test_settings)
add_test(NAME unit_test_entity   COMMAND unit_test_entity)
add_test(NAME unit_test_scene    COMMAND unit_test_scene)
add_test(NAME unit_test_lua      COMMAND unit_test_lua)

#UI kit tests
add_executable(unit_test_uikit
        uikit/unit_test/unit_test.cpp
        uikit/widget.cpp
        uikit/window.cpp)
target_include_directories(unit_test_uikit PRIVATE "${CMAKE_CURRENT_LIST_DIR}/uikit/unit_test")
target_link_libraries(unit_test_uikit DataLib BaseLib)
add_test(NAME unit_test_uikit COMMAND unit_test_uikit)

# audio tests
add_executable(unit_test_audio
        audio/unit_test/unit_test.cpp
        audio/pulseaudio.cpp
        audio/waveout.cpp
        audio/player.cpp)
target_include_directories(unit_test_audio PRIVATE "${CMAKE_CURRENT_LIST_DIR}/audio/test")
target_link_libraries(unit_test_audio BaseLib)
if (UNIX)
    target_link_libraries(unit_test_audio pulse)
    target_link_libraries(unit_test_audio pthread)
endif()
add_executable(unit_test_audio_graph
        audio/unit_test/unit_test_graph.cpp
        audio/graph.cpp)
target_include_directories(unit_test_audio_graph PRIVATE "${CMAKE_CURRENT_LIST_DIR}/audio/test")
target_link_libraries(unit_test_audio_graph BaseLib)

add_test(NAME unit_test_audio COMMAND unit_test_audio)
add_test(NAME unit_test_audio_graph COMMAND unit_test_audio_graph)

# base tests
add_executable(unit_test_math    base/unit_test/unit_test_math.cpp)
add_executable(unit_test_cmdline base/unit_test/unit_test_cmdline.cpp)
add_executable(unit_test_logging base/unit_test/unit_test_log.cpp base/logging.cpp)
add_executable(unit_test_base    base/unit_test/unit_test.cpp base/json.cpp base/utility.cpp)
target_include_directories(unit_test_base    PRIVATE "${CMAKE_CURRENT_LIST_DIR}/base/unit_test/")
target_include_directories(unit_test_logging PRIVATE "${CMAKE_CURRENT_LIST_DIR}/base/unit_test/")
if (UNIX)
   target_link_libraries(unit_test_logging PRIVATE pthread)
endif()
target_include_directories(unit_test_math     PRIVATE "${CMAKE_CURRENT_LIST_DIR}/base/unit_test")
add_test(NAME unit_test_math COMMAND unit_test_math)
add_test(NAME unit_test_cmdline COMMAND unit_test_cmdline)
add_test(NAME unit_test_logging COMMAND unit_test_logging)

add_library(GfxLibTesting
        graphics/bitmap.cpp
        graphics/drawing.cpp
        graphics/drawable.cpp
        graphics/material.cpp
        graphics/image.cpp
        graphics/opengl_es2_device.cpp
        graphics/painter.cpp
        graphics/text.cpp
        graphics/resource.cpp
        third_party/stb/stb_image.c
        third_party/stb/stb_image_write.c
        third_party/base64/base64.cpp)
target_include_directories(GfxLibTesting PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
if (UNIX)
    target_compile_options(GfxLibTesting PRIVATE -fPIC)
endif()

# gfx tests
add_executable(unit_test_bitmap   graphics/unit_test/unit_test_bitmap.cpp)
add_executable(unit_test_image    graphics/unit_test/unit_test_image.cpp)
add_executable(unit_test_graphics graphics/unit_test/unit_test.cpp)
add_executable(unit_test_device   graphics/unit_test/unit_test_device.cpp)
add_executable(unit_test_material graphics/unit_test/unit_test_material.cpp)
add_executable(unit_test_drawable graphics/unit_test/unit_test_drawable.cpp)
add_executable(unit_test_drawing graphics/unit_test/unit_test_drawing.cpp)

target_link_libraries(unit_test_image    GfxLibTesting DataLib BaseLib)
target_link_libraries(unit_test_graphics GfxLibTesting DataLib BaseLib)
target_link_libraries(unit_test_device   GfxLibTesting DataLib BaseLib wdk_system wdk_desktop_gl ${CONAN_LIBS})
target_link_libraries(unit_test_material GfxLibTesting DataLib BaseLib ${CONAN_LIBS})
target_link_libraries(unit_test_drawable GfxLibTesting DataLib BaseLib ${CONAN_LIBS})
target_link_libraries(unit_test_bitmap   GfxLibTesting DataLib BaseLib)
target_link_libraries(unit_test_drawing  GfxLibTesting DataLib BaseLib ${CONAN_LIBS})

add_test(NAME unit_test_drawable COMMAND unit_test_drawable)
add_test(NAME unit_test_drawing  COMMAND unit_test_drawing)
add_test(NAME unit_test_material COMMAND unit_test_material)
add_test(NAME unit_test_bitmap   COMMAND unit_test_bitmap)
add_test(NAME unit_test_image    COMMAND unit_test_image)
add_test(NAME unit_test_graphics COMMAND unit_test_graphics)
add_test(NAME unit_test_device   COMMAND unit_test_device)
target_include_directories(unit_test_bitmap   PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
target_include_directories(unit_test_image    PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
target_include_directories(unit_test_graphics PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
target_include_directories(unit_test_device   PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
target_include_directories(unit_test_material PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
target_include_directories(unit_test_drawing  PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")
target_include_directories(unit_test_drawable PRIVATE "${CMAKE_CURRENT_LIST_DIR}/graphics/unit_test")

add_test(NAME gfx_test_msaa0  COMMAND graphics_test --test          --no-user WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/graphics/test/dist")
add_test(NAME gfx_test_msaa4  COMMAND graphics_test --test --msaa4  --no-user WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/graphics/test/dist")
add_test(NAME gfx_test_msaa8  COMMAND graphics_test --test --msaa8  --no-user WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/graphics/test/dist")
add_test(NAME gfx_test_msaa16 COMMAND graphics_test --test --msaa16 --no-user WORKING_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/graphics/test/dist")